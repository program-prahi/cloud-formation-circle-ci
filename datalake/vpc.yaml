---
    AWSTemplateFormatVersion: 2010-09-09
    Description:  This template deploys a VPC, with a pair of public and private subnets spread
      across two Availability Zones. It deploys an internet gateway, with a default
      route on the public subnets. It deploys a pair of NAT gateways (one in each AZ),
      and default routes for them in the private subnets.

    Parameters:
      CompanyName: 
        AllowedPattern: ^[a-z]+([a-z-]*[a-z])*$
        ConstraintDescription: Company name can include lowercase letters and hyphens (-). 
          It cannot start or end with a hyphen (-).
        Default: fluent
        Description: "Naming conventions for the company"
        Type: String 
      Environment:
        Type: String
        AllowedValues:
        - dev
        - qa
        - staging
        - production
        
      ProjectName:
        Type: String
        Description: Name of the project
        Default: datalake
      Owner: 
        Type: String
        Default: Jacob Puthuprambil
        Description: "The labeled Owner for tagging purposes"
      VpcCIDR:
        Description: Please enter the IP range (CIDR notation) for this VPC
        Type: String
        Default: 10.192.0.0/16
        AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'

      PublicSubnet1CIDR:
        Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
        Type: String
        Default: 10.192.10.0/24
        AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
      PublicSubnet2CIDR:
        Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
        Type: String
        Default: 10.192.40.0/24
        AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
      Host:
        Type: String

      # PrivateSubnet1CIDR:
      #   Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
      #   Type: String
      #   Default: 10.192.20.0/24
      #   AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
      # PrivateSubnet2CIDR:
      #   Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
      #   Type: String
      #   Default: 10.192.30.0/24
      #   AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
      
    Resources:
      VPC:
        Type: AWS::EC2::VPC
        Properties:
          CidrBlock: !Ref VpcCIDR
          EnableDnsSupport: true
          EnableDnsHostnames: true
          Tags:
            - Key: Name
              Value: !Sub '${ProjectName}-${Environment}-VPC'
            - Key: Owner
              Value: !Sub '${Owner}-${CompanyName}'
            - Key: Environment
              Value: !Ref Environment

      InternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
          Tags:
            - Key: Name
              Value: !Sub '${ProjectName}-${Environment}-InternetGateway'
            - Key: Owner
              Value: !Sub '${Owner}-${CompanyName}'
            - Key: Environment
              Value: !Ref Environment

      InternetGatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
          InternetGatewayId: !Ref InternetGateway
          VpcId: !Ref VPC

      PublicSubnet1:
        Type: AWS::EC2::Subnet
        Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select [ 0, !GetAZs '' ]
          CidrBlock: !Ref PublicSubnet1CIDR
          MapPublicIpOnLaunch: true
          Tags:
            - Key: Name
              Value: !Sub '${ProjectName}-${Environment}-Public Subnet 1'
            - Key: Owner
              Value: !Sub '${Owner}-${CompanyName}'
            - Key: Environment
              Value: !Ref Environment
      PublicSubnet2:
        Type: AWS::EC2::Subnet
        Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select [ 1, !GetAZs '' ]
          CidrBlock: !Ref PublicSubnet2CIDR
          MapPublicIpOnLaunch: true
          Tags:
            - Key: Name
              Value: !Sub '${ProjectName}-${Environment}-Public Subnet 2'
            - Key: Owner
              Value: !Sub '${Owner}-${CompanyName}'
            - Key: Environment
              Value: !Ref Environment


      # PrivateSubnet1:
      #   Type: AWS::EC2::Subnet
      #   Properties:
      #     VpcId: !Ref VPC
      #     AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      #     CidrBlock: !Ref PrivateSubnet1CIDR
      #     MapPublicIpOnLaunch: false
      #     Tags:
      #       - Key: Name
      #         Value: !Sub '${ProjectName}-${Environment}-Private Subnet-1'
      #       - Key: Owner
      #         Value: !Sub '${Owner}-${CompanyName}'
      #       - Key: Environment
      #         Value: !Ref Environment

      # PrivateSubnet2:
      #   Type: AWS::EC2::Subnet
      #   Properties:
      #       VpcId: !Ref VPC
      #       AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      #       CidrBlock: !Ref PrivateSubnet2CIDR
      #       MapPublicIpOnLaunch: false
      #       Tags:
      #           - Key: Name
      #             Value: !Sub '${ProjectName}-${Environment}-Private Subnet-2'
      #           - Key: Owner
      #             Value: !Sub '${Owner}-${CompanyName}'
      #           - Key: Environment
      #             Value: !Ref Environment

      # NatGatewayEIP:
      #   Type: AWS::EC2::EIP
      #   DependsOn: InternetGatewayAttachment
      #   Properties:
      #     Domain: vpc
      #     Tags:
      #       - Key: Name
      #         Value: !Sub '${ProjectName}-${Environment}-NAT EIP'
      #       - Key: Owner
      #         Value: !Sub '${Owner}-${CompanyName}'
      #       - Key: Environment
      #         Value: !Ref Environment

      # NatGateway:
      #   Type: AWS::EC2::NatGateway
      #   Properties:
      #     AllocationId: !GetAtt NatGatewayEIP.AllocationId
      #     SubnetId: !Ref PublicSubnet
      #     Tags:
      #       - Key: Name
      #         Value: !Sub '${ProjectName}-${Environment}-NAT Gateway'
      #       - Key: Owner
      #         Value: !Sub '${Owner}-${CompanyName}'
      #       - Key: Environment
      #         Value: !Ref Environment

      PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
          VpcId: !Ref VPC
          Tags:
            - Key: Name
              Value: !Sub '${ProjectName}-${Environment}-Public Route Table'
            - Key: Owner
              Value: !Sub '${Owner}-${CompanyName}'
            - Key: Environment
              Value: !Ref Environment

      DefaultPublicRoute:
        Type: AWS::EC2::Route
        DependsOn: InternetGatewayAttachment
        Properties:
          RouteTableId: !Ref PublicRouteTable
          DestinationCidrBlock: 0.0.0.0/0
          GatewayId: !Ref InternetGateway

      PublicSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
          RouteTableId: !Ref PublicRouteTable
          SubnetId: !Ref PublicSubnet1
      PublicSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
          RouteTableId: !Ref PublicRouteTable
          SubnetId: !Ref PublicSubnet2

      # PrivateRouteTable:
      #   Type: AWS::EC2::RouteTable
      #   Properties:
      #     VpcId: !Ref VPC
      #     Tags:
      #       - Key: Name
      #         Value: !Sub '${ProjectName}-${Environment}-Private Route Table'
      #       - Key: Owner
      #         Value: !Sub '${Owner}-${CompanyName}'
      #       - Key: Environment
      #         Value: !Ref Environment

      # DefaultPrivateRoute:
      #   Type: AWS::EC2::Route
      #   Properties:
      #     RouteTableId: !Ref PrivateRouteTable
      #     DestinationCidrBlock: 0.0.0.0/0
      #     NatGatewayId: !Ref NatGateway

      # PrivateSubnet1RouteTableAssociation:
      #   Type: AWS::EC2::SubnetRouteTableAssociation
      #   Properties:
      #     RouteTableId: !Ref PrivateRouteTable
      #     SubnetId: !Ref PrivateSubnet1
      # PrivateSubnet2RouteTableAssociation:
      #   Type: AWS::EC2::SubnetRouteTableAssociation
      #   Properties:
      #       RouteTableId: !Ref PrivateRouteTable
      #       SubnetId: !Ref PrivateSubnet2

      SecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
          GroupName: "no-ingress-sg"
          GroupDescription: "Security group with mysql ingress rule"
          VpcId: !Ref VPC
          SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort: 3306
              ToPort: 3306
              CidrIp: !Ref Host
          Tags:
            - Key: Name
              Value: !Sub '${ProjectName}-${Environment}-No Ingress Security Group'
            - Key: Owner
              Value: !Sub '${Owner}-${CompanyName}'
            - Key: Environment
              Value: !Ref Environment

    Outputs:
      VPC:
        Description: A reference to the created VPC
        Value: !Ref VPC

      PublicSubnet1:
        Description: Public Subnet
        Value:  !Ref PublicSubnet1


      PublicSubnet2:
        Description: Public Subnet-2
        Value:  !Ref PublicSubnet2

      SecurityGroup:
        Description: Security group with no ingress rule
        Value: !GetAtt SecurityGroup.GroupId
